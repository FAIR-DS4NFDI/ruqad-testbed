meta {
  name: Initiate negotiation
  type: http
  seq: 4
}

post {
  url: {{HOST}}/api/management/v3/contractnegotiations
  body: json
  auth: apikey
}

auth:apikey {
  key: X-Api-Key
  value: password
  placement: header
}

body:json {
  {
      "@context": [
          "https://w3id.org/edc/connector/management/v0.0.1"
      ],
      "@type": "ContractRequest",
      "counterPartyAddress": "{{PROVIDER_DSP_URL}}/api/dsp",
      "counterPartyId": "{{PROVIDER_ID}}",
      "protocol": "dataspace-protocol-http",
      "policy": {
          "@type": "Offer",
          "@id": "{{POLICY_ID_ASSET_1}}",
          "assigner": "{{PROVIDER_ID}}",
          "permission": [],
          "prohibition": [],
          "obligation": {
              "action": "use",
              "constraint": {
                  "leftOperand": "DataAccess.level",
                  "operator": "eq",
                  "rightOperand": "processing"
              }
          },
          "target": "asset-1"
      },
      "callbackAddresses": []
  }
}

script:pre-request {
  if(!bru.getEnvVar("POLICY_ID_ASSET_1") !== undefined && bru.getEnvVar("POLICY_ID_ASSET_1") !== null){
      throw new Error('Policy-ID of Asset-1 is not yet available, please execute request "Get Cached Catalog" first!');
  }
}

tests {
  bru.setEnvVar("CONTRACT_NEGOTIATION_ID", res.getBody()["@id"])
  
  test("Status code is >=200 and <300", function () {
      expect(res.getStatus() < 300 && res.getStatus() >= 200).to.be.true
  });
  test("Contract negotiation id is set", function(){
      expect(bru.getEnvVar("CONTRACT_NEGOTIATION_ID")).not.to.be.undefined
  })
}
